@using ForecastData
@page "/weather"
@inject WeatherService WeatherService

<EditForm Model="@WeatherRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="city" @bind-Value="@WeatherRequest.City"></InputText>

    <button type="submit">Get Weather</button>
</EditForm>

@if (WeatherResponse != null)
{
    <h1>Weather in @WeatherResponse.Name</h1>
    <p>Temperature: @(WeatherResponse.Main?.Temp ?? 0.0) ℃</p>
    <p>Min/Max Temperature: @(WeatherResponse.Main?.TempMin ?? 0.0) ℃ / @(WeatherResponse.Main?.TempMax ?? 0.0) ℃</p>
    <p>Humidity: @(WeatherResponse.Main?.Humidity ?? 0.0)%</p>
    <p>Description: @(WeatherResponse.Weather?.FirstOrDefault()?.Description ?? "N/A")</p>
    <p>Wind speed: @(WeatherResponse.Wind?.Speed ?? 0.0) m/s</p>
    <p>Pressure: @(WeatherResponse.Main?.Pressure ?? 0.0) hpa</p>
    <p><img width="40px" src="/icons/sunrise.png"/> @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunrise ?? 0).ToLocalTime().TimeOfDay</p>
    <p><img width="40px" src="/icons/sunset.png"/>  @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunset ?? 0).ToLocalTime().TimeOfDay</p>
    <img src="@($"http://openweathermap.org/img/wn/{WeatherResponse.Weather?.FirstOrDefault()?.Icon}@2x.png")" alt="Weather icon" />
}

@if (ForecastResponse != null)
{
    Dictionary<DateTimeOffset, List<Forecast>> forecastsByDay = new Dictionary<DateTimeOffset, List<Forecast>>();
    foreach (var forecast in ForecastResponse.List)
    {
        var day = DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).ToLocalTime().Date;
        if (!forecastsByDay.ContainsKey(day))
        {
            forecastsByDay[day] = new List<Forecast>();
        }
        forecastsByDay[day].Add(forecast);
    }

<div id="accordion">
    @{
        int count = 0;
        foreach (KeyValuePair<DateTimeOffset, List<Forecast>> forecastGroup in forecastsByDay)
        {
            <div class="card">
                <div class="card-header" id="@("heading"+count)">
                    <h2 class="mb-0">
                        <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="@("#collapse"+count)" aria-expanded="true" aria-controls="@("collapse"+count)">
                            @forecastGroup.Key.Date
                        </button>
                    </h2>
                </div>

                <div id="@("collapse"+count)" class="collapse @(count == 0 ? "show" : "")" aria-labelledby="@("heading"+count)">
                    <div class="card-body">
                        @foreach (var forecast in forecastGroup.Value)
                        {
                            var icon = forecast.Weather.FirstOrDefault()?.GetIconUrl(forecast.Dt, WeatherResponse.Sys.Sunrise, WeatherResponse.Sys.Sunset);
                            <p>
                                <img src="@icon" width="50" />
                                @DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).ToLocalTime(): @forecast.Main.Temp ℃, @forecast.Weather.FirstOrDefault()?.Description
                            </p>
                        }
                    </div>
                </div>
            </div>
            count++;
        }
    }
</div>



}




@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}

@code {
    string ErrorMessage;
    WeatherRequest WeatherRequest = new WeatherRequest();
    WeatherResponse WeatherResponse;
    ForecastResponse ForecastResponse;
    
    private async Task HandleValidSubmit()
    {
        try
        {
            WeatherResponse = await WeatherService.GetWeather(WeatherRequest.City);
            ForecastResponse = await WeatherService.GetForecast(WeatherRequest.City);

            ErrorMessage = string.Empty; // clear any previous error message
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}

