@page "/weather"
@inject WeatherService WeatherService

<EditForm Model="@WeatherRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="city" @bind-Value="@WeatherRequest.City"></InputText>

    <button type="submit">Get Weather</button>
</EditForm>

@if (WeatherResponse != null)
{
    <h1>Weather in @WeatherResponse.Name</h1>
    <p>Temperature: @(WeatherResponse.Main?.Temp ?? 0.0) ℃</p>
    <p>Min/Max Temperature: @(WeatherResponse.Main?.TempMin ?? 0.0) ℃ / @(WeatherResponse.Main?.TempMax ?? 0.0) ℃</p>
    <p>Humidity: @(WeatherResponse.Main?.Humidity ?? 0.0)%</p>
    <p>Description: @(WeatherResponse.Weather?.FirstOrDefault()?.Description ?? "N/A")</p>
    <p>Wind speed: @(WeatherResponse.Wind?.Speed ?? 0.0) m/s</p>
    <p>Pressure: @(WeatherResponse.Main?.Pressure ?? 0.0) hpa</p>
    <p><img width="40px" src="/icons/sunrise.png"/> @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunrise ?? 0).ToLocalTime().TimeOfDay</p>
    <p><img width="40px" src="/icons/sunset.png"/>  @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunset ?? 0).ToLocalTime().TimeOfDay</p>
    <img src="@($"http://openweathermap.org/img/wn/{WeatherResponse.Weather?.FirstOrDefault()?.Icon}@2x.png")" alt="Weather icon" />

}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}
@code {
    string ErrorMessage;
    WeatherRequest WeatherRequest = new WeatherRequest();
    WeatherResponse WeatherResponse;

  private async Task HandleValidSubmit()
{
    try
    {
        WeatherResponse = await WeatherService.GetWeather(WeatherRequest.City);
        ErrorMessage = string.Empty; // clear any previous error message
    }
    catch (HttpRequestException ex)
    {
        ErrorMessage = ex.Message;
    }
}
}
