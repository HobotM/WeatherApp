@using WeatherApp.ForecastData
@page "/weather"
@inject WeatherService WeatherService

<EditForm Model="@WeatherRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="city" @bind-Value="WeatherRequest.City"></InputText>


    <button type="submit">Get Weather</button>
</EditForm>

@if (WeatherResponse != null)
{
    <h1>Weather in @WeatherResponse.Name</h1>
    <p>Temperature: @(WeatherResponse.Main?.Temp ?? 0.0) ℃</p>
    <p>Min/Max Temperature: @(WeatherResponse.Main?.TempMin ?? 0.0) ℃ / @(WeatherResponse.Main?.TempMax ?? 0.0) ℃</p>
    <p>Humidity: @(WeatherResponse.Main?.Humidity ?? 0.0)%</p>
    <p>Description: @(WeatherResponse.Weather?.FirstOrDefault()?.Description ?? "N/A")</p>
    <p>Wind speed: @(WeatherResponse.Wind?.Speed ?? 0.0) m/s</p>
    <p>Pressure: @(WeatherResponse.Main?.Pressure ?? 0.0) hpa</p>
    <p><img width="40px" src="/icons/sunrise.png"/> @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunrise ?? 0).ToLocalTime().TimeOfDay</p>
    <p><img width="40px" src="/icons/sunset.png"/>  @DateTimeOffset.FromUnixTimeSeconds(WeatherResponse.Sys?.Sunset ?? 0).ToLocalTime().TimeOfDay</p>
    <img src="@($"http://openweathermap.org/img/wn/{WeatherResponse.Weather?.FirstOrDefault()?.Icon}@2x.png")" alt="Weather icon" />
}

@if (ForecastResponse != null)
{
    Dictionary<DateTimeOffset, List<Forecast>> forecastsByDay = new Dictionary<DateTimeOffset, List<Forecast>>();
    foreach (var forecast in ForecastResponse.List)
    {
        var day = DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).ToLocalTime().Date;
        if (!forecastsByDay.ContainsKey(day))
        {
            forecastsByDay[day] = new List<Forecast>();
        }
        forecastsByDay[day].Add(forecast);
    }

    <div class="row row-cols-1 row-cols-md-5 g-4">
        @{
            int count = 0;
            foreach (KeyValuePair<DateTimeOffset, List<Forecast>> forecastGroup in forecastsByDay.Take(5)) // Takes the first 5 days forecast
            {
                <div class="col">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">@forecastGroup.Key.ToString("dddd") @GetDayWithSuffix(forecastGroup.Key)</h5>
                        </div>
                        <div class="card-body">
                            @foreach (var forecast in forecastGroup.Value)
                            {
                                var time = DateTimeOffset.FromUnixTimeSeconds(forecast.Dt).ToLocalTime();
                                var icon = forecast.Weather.FirstOrDefault()?.GetIconUrl(forecast.Dt, WeatherResponse.Sys.Sunrise, WeatherResponse.Sys.Sunset);
                                <div class="d-flex align-items-center">
                                    <img src="@icon" width="50" />
                                    <p class="mb-0 ml-2">
                                        @time.ToString("h tt"): @forecast.Main.Temp ℃
                                    </p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                count++;
            }
        }
    </div>
}






@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}

@code {
    string ErrorMessage;
    WeatherRequest WeatherRequest = new WeatherRequest();
    WeatherResponse WeatherResponse;
    ForecastResponse ForecastResponse;
    
    private async Task HandleValidSubmit()
    {
        try
        {
            WeatherResponse = await WeatherService.GetWeather(WeatherRequest.City);
            ForecastResponse = await WeatherService.GetForecast(WeatherRequest.City);

            ErrorMessage = string.Empty; // clear any previous error message
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = ex.Message;
        }
    }

     private string GetDayWithSuffix(DateTimeOffset date)
    {
        int day = date.Day;
        if (day % 10 == 1 && day != 11)
        {
            return day + "st";
        }
        else if (day % 10 == 2 && day != 12)
        {
            return day + "nd";
        }
        else if (day % 10 == 3 && day != 13)
        {
            return day + "rd";
        }
        else
        {
            return day + "th";
        }
    }
}

