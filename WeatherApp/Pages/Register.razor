@page "/register"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using WeatherApp.Models
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<RegisterModel> Logger
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<h2>@Title</h2>
<div class="row">
    <div class="col-md-8">
        <form method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Input.Email"></label>
                <input asp-for="Input.Email" class="form-control" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Password"></label>
                <input asp-for="Input.Password" class="form-control" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>
</div>

@code {
    Dictionary<string, List<string>> ModelState = new Dictionary<string, List<string>>();

    private string Title = "Register";
    private InputModel Input = new InputModel();

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

   public async Task OnPostAsync(string returnUrl = null)
{
    returnUrl = returnUrl ?? NavigationManager.ToAbsoluteUri("/").ToString();
    
    var validationContext = new ValidationContext(Input, serviceProvider: null, items: null);
    var validationResults = new List<ValidationResult>();

    if (!Validator.TryValidateObject(Input, validationContext, validationResults, true))
    {
        foreach (var validationResult in validationResults)
        {
            if (!ModelState.ContainsKey(validationResult.MemberNames.First()))
            {
                ModelState[validationResult.MemberNames.First()] = new List<string> { validationResult.ErrorMessage };
            }
            else
            {
                ModelState[validationResult.MemberNames.First()].Add(validationResult.ErrorMessage);
            }
        }
    }
    else
    {
        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo(returnUrl);
        }
        foreach (var error in result.Errors)
        {
            ModelState[string.Empty] = new List<string> { error.Description };
        }
    }
}


}

